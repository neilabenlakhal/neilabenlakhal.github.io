---
layout: post
title:  "Chapter 4 added !"
date:   2021-11-05 10:40:12 +0300
categories: Course update
---

The Web materials and resources of Chapter 4 are listed here.

# [Chapter 4, RESTFUL architecture](https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_4) 


 `Chapter 4 REST Architecture` introduces the concepts related to the programmable Web, shows how HTTP and Web services are related to each other, introduces the principles behind REST Architectural Style, explains how HTTP verbs are used in REST applications and explains the need for RESTFul web services. By the end of this chapter, students will learn the core architectural elements that form a RESTful system and will get introduced to some frameworks and tools that can be used to implement and test RESTful Web services.

### Before lecture

üìö **ToRead**

Objectives :  Understanding HTTP protocol - Understanding REST Architecture principles - learning how to implement RESTful Web services.

1. From [Web Service Implementation and Composition Techniques 1st ed. 2017 Edition, springer](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/Web%20Service%20Implementation%20and%20Composition%20Techniques.pdf)
    * **Chap 3.** Web Services ‚Äì REST or Restful Services

2. From [Master Php 7, 2017](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/PHPWebServices2ndEdition.pdf)
    * **Chap 11.** Building Services (Working with REST section)

3. From [RESTful Java Web Services, 2017, 3rd ed.](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_4/ToRead/RESTful%20Java%20Web%20Services%20-%20Third%20Edition_%20-%20Bogunuva%20Mohanram%20Balachandar.pdf)
    * **Chap 5.** Introducing the REST Architectural Style

4. From [Building RESTful Web Services with PHP 7 ed. 2017](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_4/ToRead/Building%20RESTful%20Web%20Services%20with%20PHP%207.pdf)
   * **Chap 1.** RESTful Web Services, Introduction and Motivation.
   
5. From [PhP web services, second edition, 2016](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/PHPWebServices2ndEdition.pdf)
    * **Chap 1.** HTTP
    * **Chap 2.** HTTP Verbs
    * **Chap 3.** Headers
    * **Chap 5.** JSON
    * **Chap 6.** XML
    * **Chap 8.** REST
    * **Chap 9.** HTTP Tools

6. [Architectural Styles and the Design of Network-based  Software Architectures, by Roy Fielding PhD Thesis, University of California, Irvine, 2000](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm)


üìù **ToDo**
The objective of this section, is to explore frameworks and tools required to build RESTFUL Web services. Design guidelines that developers will find useful while building RESTful web services are also given.
#### Running lecture demos:

In order to implement RESTful Web services, you will need: 

   - A `service container` : to deploy and publish the service. We will use apache with AMPPS.
   - An `HTTP library`  : to handle service HTTP-based invocations. We will use Curl and PHP‚Äôs built-in stream-handling functionality.
   - A `JSON formatting tool` : to encode and decode service data to be sent/received in the body of an HTTP request/response. We will use PHP classes.
   - An `XML library` : To parse XML, serialize and deserialize service data to be sent/received in the body of an HTTP request/response. We will use DOM and simpleXML.
   - `APIs frameworks` to implement and handle restful services requests and responses. We will use PHP extensions.


 Web services examples of this course are deployed in Apache, and are written in Php.<br>

To run demo Web services provided with this lecture, you need first to clone the following repository on your machine:[TODO/REST](https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_4/ToDo/rest/).

 Then, you need the following tools installed :  

* [AMPPS](https://ampps.com/downloads) is a MAMP, WAMP and LAMP software stack from Softaculous enabling Apache, Mysql, MongoDB, PHP, Perl, and Python. This includes everything you need for website development. Start developing your website from open source web applications or just start writing code yourself. 
  
* [PHP‚Äôs cURL extension](https://www.php.net/manual/en/book.curl.php) : PhP has its own wrappers for cURL. [cURL](https://curl.se/) allows to make any web request imaginable in any form, repeat those requests, and observe in detail exactly what information is exchanged between client and server. It is a brilliant, quick tool for inspecting what‚Äôs going on with a Web request, particularly when dealing with something that isn‚Äôt in a browser or where you need to be more specific about how the request is made. PhP's cURL extension  has excellent and comprehensive documentation on [http://php.net](http://php.net). We can use this extension to make all kinds of HTTP requests, including sending custom headers, sending body data, and using different verbs to make our request. The PHP cURL extension isn‚Äôt the easiest interface to use, although it does have the advantage of being reliably available. 

* [PHP‚Äôs built-in stream-handling functionality](http://php.net) :  Another great way of making HTTP requests that is always available in PHP is to use PHP‚Äôs stream-handling abilities with the file functions. In its simplest form, this means that, if `allow_url_fopen` is enabled (see the PHP manual), it is possible to make requests using `file_get_contents()`. The simplest example is making a `GET` request and reading the response body in as if it were a local file. Using the PHP `file_get_contents()` function, we can read files or API data but can not perform write, update, delete operations. Use cURL methods to perform all those operations using API data.
  
 * These chrome extensions with added-value :  
     * [JSON formatter](https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en) : beautifies JSON data with advanced formatting and validation algorithms. 
     * [Network Sniffer](https://chrome.google.com/webstore/detail/network-sniffer/coblekblkacfilmgdghecpekhadldjfj?hl=en) : network traffic analyser to capture HTTP requests/responses.  
 * [POSTMAN](https://www.postman.com/) : is an API client that makes it easy for developers to create, share, test and document APIs. This is done by allowing users to create and save simple and complex HTTP/s requests, as well as read their responses. It is a great tool when trying to dissect RESTful APIs made by others or test ones you have made yourself. It offers a user interface with which to make HTML requests to test an API's functionality. 
  
 * [POSTMAN Console](https://www.postman.com/) : To see the actual HTTP request traffic that is being sent and received in the application. In some cases, you might discover APIs that are not even documented. Postman Console allows to see and capture this network traffic easily. 
  
* [SOAPUI the open source version](https://www.soapui.org/downloads/soapui/):  an API (SOAP/REST) testing tool. SOAPUI allows to generate Restful service code from service URI and service [WADL(web application description language)](https://www.w3.org/Submission/wadl/) resources documentation. For further explanation, see [https://www.soapui.org/docs/rest-testing/](https://www.soapui.org/docs/rest-testing/).

#### Testing others Web services implementation platforms :  
 
Every programming language has one or several APIs  to implement RESTFUL Web services that support HTTP/REST based communication. for this `ToDo4` section, you are highly advised to do the following Lab exercises, to get familiarized with implementing Web services in PHP, JAVA and .NET.

* __Implementing RESTFUL web services in JAVA__: Java community defines standard REST support via JAX-RS (the Java API for RESTful Web Services) in JSR 311. There are a few implementations of this standard available now (e.g., Apache CXF, RESTEasy by JBoss, Jersey by Sun). JAX-RS is a technology for building web services and clients that communicate using JSON/XML.
  
   -[Apache CXF](https://cxf.apache.org/): is an open source services framework. CXF helps you build and develop services using frontend programming APIs, like JAX-WS (SOAP) and JAX-RS (REST). These services can speak a variety of protocols such as SOAP, XML/HTTP, RESTful HTTP, or CORBA and work over a variety of transports such as HTTP, JMS or JBI.

* __Practical Exercises :__
  - Lab Exercise 01: [Create a web API with ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-5.0&tabs=visual-studio).

  - Lab Exercise 02: [Build RESTful Service in Java using JAX-RS and Jersey (Celsius to Fahrenheit & Fahrenheit to Celsius)](https://crunchify.com/how-to-build-restful-service-with-java-using-jax-rs-and-jersey/).
  
   - Lab Exercise 03: A Simple REST Service with Apache CXF (JAX-RS) from [Web Service Implementation and Composition Techniques 1st ed. 2017 Edition, springer](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter_3Section2/ToRead/Web%20Service%20Implementation%20and%20Composition%20Techniques.pdf).

* __Web service testing :__

In order to test web services we will be using :

* [SOAPUI the open source version](https://www.soapui.org/downloads/soapui/),  an API (SOAP/REST) testing tool.
  
### After lecture : 

üíª **ToCode** 

The objective of this `ToCode4` section is to manipulate two (2) RESTFUL Web services : `RWS1` and `RWS2` : <br>

  - `RWS1`: is a RESTFUL Web service you have to implement yourself.
  - `RWS2`: is a RESTFUL Web service you have to choose from internet; you can for instance try [Covid19 APIS](https://explore.postman.com/4DTEzqFagDUe7F), test it, then, write 2(two) clients against `RWS2` : `Client1` and `Client2`.

> Step 1

Implement a RESTFUL web service -- we will call it `RWS1`.<br>

   -  Write a  PHP web service using CURL library. Your web service should implement at least (2)two HTTP methods. Test your web service with POSTMAN or SOAPUI and generate a WADL file for it.
   - Write a client in PHP to your Web service (one of the (2)two HTTP methods).  

> Step 2

Search for your `RWS2` : it should supports REST-based invocation.<br>

Testing :
  - TEST the web service with SOAPUI (choose a method with XML response) and generate WADL file.  
  - TEST the web service with postman ((choose a method with JSON response) and capture HTTP traffic.
  - Write `Client1` for a method with XML response : the one tested with SOAPUI. Use SimpleXML to parse XML.
  - Write `Client2` for a method with JSON response : the one tested with POSTMAN.

> Step 3 

Call `RWS1` and `RWS2` using a Web interface.

> Step 4 (Bonus Step)

Implement a RESTFUL web service  in Java or .NET and write a client for this web service in PHP.

> What to submit ?

-Create a folder and name it `ToCode4`. Create six(6) subfolders and name them : `RWS1`, `RWS2`, `client1`, `client2`, `interface`, and `bonus`.

- Store the source code, of the WS and the client of each WS. Add  tests and HTTP traffic capture of your `RWS1` and `RWS2` (print screens).
  
- Store the source code of the interface in `interface` with print screens of its execution interface with results. You may add an explanatory description of each web service method.

- Push your  `ToCode4` to your `GIT` repository. 
  
- Send the following on Microsoft Teams : Link of your git repository, print screens of the various POSTMAN/SOAPUI tests.  

## Additional resources : 

Several RESTFUL Web services web sites :

- üîó [API directory](https://www.programmableweb.com/)
- üîó [Collection of public APIs](https://explore.postman.com/templates)
- üîó [Collection of public APIs](https://github.com/public-apis/public-apis)
- üîó [Flickr API](https://www.flickr.com/services/api/)
- üîó [List of weather related and financial web services](http://sofa.uqam.ca/soda/webservices.php)
- üîó [Top 50 Most Popular APIs on RapidAPI (2020)](https://rapidapi.com/blog/most-popular-api/)

## Chapter Videos :

[Youtube video lecture Section 1: WHAT IS REST ?](https://www.youtube.com/embed/uYjxzYU3jS0)

<iframe width="560" height="315" src="https://www.youtube.com/embed/uYjxzYU3jS0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


[Youtube video lecture Section 2: HOW REST IS USING HTTP VERBS](https://youtu.be/GR1jr2AITT4)

<iframe width="560" height="315" src="https://www.youtube.com/embed/GR1jr2AITT4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


[Youtube video lecture Section 3: REST PRINCIPLES](https://youtu.be/19hlxaS9)

<iframe width="560" height="315" src="https://www.youtube.com/embed/19hlxaS9-j4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


[Youtube video lecture Section 4: IMPLEMENTING RESTFUL CLIENTS AND SERVICES](https://youtu.be/DbAwOmDiw8M)

<iframe width="560" height="315" src="https://www.youtube.com/embed/DbAwOmDiw8M" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

