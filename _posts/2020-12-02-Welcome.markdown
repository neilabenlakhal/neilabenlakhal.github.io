---
layout: post
title:  "Chapter 6 added !"
date:   2021-12-08 10:40:12 +0300
categories: Course update
---

The Web materials and resources of Chapter 6 are listed here.

# [Chapter 6, Docker: a Defacto Platform for Microservices Architecture](https://github.com/neilabenlakhal/neilabenlakhal.github.io/tree/master/2020-2021Lecture/SOC/Chapter_6) 

`Chapter 6, Docker: a Defacto Platform for Microservices Architecture`.  To leverage the benefits of the microservices architectural style, one needs to use technologies aligned with the characteristics of microservices. Containerization has become a popular deployment format for microservices, and Docker is the leading container platform that packages everything needed to deploy and run microservices (i.e., code, libraries, settings, etc.) .With a lot of advantages, Docker become the best fit to implementing microservices architecture. In this Chapter we will dive deep in Docker to see how Docker can effectively help in leveraging microservices architecture. It is mainly intended at laying a solid foundation for the philosophy of containers and microservices that is unlikely to change, no matter what Docker looks like in the coming months and years.


üìö **ToRead**

Objectives :  Acquire a deep introduction to the fundamentals of working with Docker. You  will learn how to use Docker effectively, you‚Äôll also grasp how it works, how each detailed feature of Docker ecosystem is meant to be used. You will have the fundamental skillset required to learn advanced topics more quickly if you wish to go further with containerized ventures.

1. From [Docker Deep Dive, ZERO TO DOCKER IN A SINGLE BOOK by Nigel Poulton, ed. 2018](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/1Docker%20Deep%20Dive%20by%20Nigel%20Poulton.pdf)
2. From [Docker Deep Dive, ZERO TO DOCKER IN A SINGLE BOOK by Nigel Poulton, ed. 2020](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/2Docker%20Deep%20Dive%20by%20Nigel%20Poulton.pdf)
  * **Chap 1-14.** All.
3. From [Docker in Action, Second ed. 2019](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/3.pdf)
  * **Chap 1-5,7-9,11-13.** All.
4. From [Docker in Action, first ed. 2016](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/4.pdf)
  * **Chap 1-5,7-8,11-12.** All.
5. From [Docker Orchestration. 2016](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/5.pdf)
  * **Chap 2.** Building Multi-Container Applications with Docker Compose.
  * **Chap 4.** Orchestration with Docker Swarm.
6. From [Learning Docker, Second Edition, Faster app development and deployment with Docker containers, 2017](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/6.pdf)
  * **Chap 1-8.** All.
7. From [Learn Docker, Fundamentals of Docker 19.x 2020 Packt Publishing](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/7.pdf)
  * **Chap 1-5,10-13.** All.

8. From [Mastering Docker, Second Edition, Master this widely used containerization tool, 2017](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/8.pdf)
  * **Chap 1-7.** All.

9. From [Mastering Docker, Fourth Edition, Master this widely used containerization tool, 2020](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/9.pdf)
  * **Chap 1-5,8-9.** All.


üìù **ToDo**

The objective of this section is to prepare our personal or working environment to work efficiently and effectively with Docker. We will discuss in detail how to set up an ideal environment that can be used when working with Docker containers.

#### Running lecture demos :

In order to run the various lecture demos and examples, you will need either to install Docker Desktop or use PLAY WITH DOCKER. There are lots of ways and places to install Docker. There‚Äôs Windows, Mac, and Linux. You can install in the cloud, on premises, and on your laptop. You will also need also to sign up for a Docker hub account [https://hub.docker.com/signup](https://hub.docker.com/signup).

To get the most out of this chapter, you will need a machine capable of running Docker. This machine should have at least 8 GB RAM and 30 GB HDD free with an Intel i3 processor or above, running one of the following OSes:
   - macOS High Sierra or above 
   - Windows 10 Professional/Enterprise/Education (does not work with Home edition)
   - Ubuntu 18.04 or above

- [Docker Desktop](https://www.docker.com/products/docker-desktop)
    `Docker Desktop` on Windows requires 64-bit version of Windows 10 Pro/Enterprise/Education (does not work with Home edition).  Hardware virtualization support must be enabled in your system‚Äôs BIOS The Hyper-V and Containers features must be enabled in Windows. For a most updated version of installation procedure, follow the installation as explained on docker official web site or refer to `Chapter 1` from [Mastering Docker, Fourth Edition, Master this widely used containerization tool, 2020](https://github.com/neilabenlakhal/neilabenlakhal.github.io/blob/master/2020-2021Lecture/SOC/Chapter6/ToRead/9.pdf).


- [PWD](https://www.docker.com/play-with-docker)
    In cas installation on your machine is not possible, you can use [https://labs.play-with-docker.com/] (https://labs.play-with-docker.com/) `PLAY WITH DOCKER (PWD)`. It provides a free-to-use fully functional Docker playground that lasts for 4 hours. You can add multiple nodes and even cluster them in a swarm. Sometimes performance can be slow, but for a free-to-use service it is excellent.

- [Docker HUB Account](https://hub.docker.com) 
    The home page, which can be found at [https://hub.docker.com] (https://hub.docker.com), contains a Sign-Up form and, at the top-right, an option to Sign in. The   odds are that if you have been dabbling with Docker, then you already have a Docker ID. If you don't, use the Sign-Up form on the home page to create one. If you already have a Docker ID, then simply click Sign in. Once logged in, you will be presented with the main Dashboard.

#### Running online tutorials: 

Scenarios than you can practice: 

O'reilly KATAKODA : Learn Docker & Containers using Interactive Browser-Based Scenarios

- [Deploying Your First Docker Container](https://www.katacoda.com/courses/docker/deploying-first-container)
- [Deploy Static HTML Website as Container](https://www.katacoda.com/courses/docker/create-nginx-static-web-server)
- [Building Container Images](https://www.katacoda.com/courses/docker/2)
- [Dockerizing Node.js](https://www.katacoda.com/courses/docker/3)
- [Persisting DATA using volumes](https://www.katacoda.com/courses/docker/persisting-data-using-volumes)

Dockerhub Labs: 
- [https://github.com/docker/labs](https://github.com/docker/labs)

- [https://github.com/collabnix/dockerlabs](https://github.com/collabnix/dockerlabs)

- [https://training.play-with-docker.com/](https://training.play-with-docker.com/)


üíª **ToCode**

You are strongly advised to run all lecture demos. 

Make a print screen of the following tasks; send them using microsoft teams with your Dockerhub account URL :

1. Create an account with your real name and last name on Dockerhub. Make a print screen of your account.

2. Execute `docker image ls` in your terminal on your computer and make a print screen of the command result. Once you have done course demos, you should have at least the following images on your machine:  

* hello-world
* nginx
* busybox
* kodekloud/simple-prompt-docker
* ubuntu
* jpetazzo/clock
* alpine
* redis
* etc.

3. Execute `docker ps -a` in your terminal. This command should list all created containers so far.

4. Follow the steps given in our course content in `DOCKERIZING AN APPLICATION HOW TO CREATE YOUR OWN IMAGE` section (slide 233); create an image named `web` and push its repository to your docker hub. Share with me the repository address. It should be something like this : [https://hub.docker.com/repository/docker/neilabenlakhal/web](https://hub.docker.com/repository/docker/neilabenlakhal/web) but with your name instead. Make a print screen of your DockerHub repository. you should submit a print screen like (Slide 258).

5. Execute the containerized Web App and make a print screen of the execution : you should have a result like in (slide 257).


6. Create an image of the Flask Web App, see (slide 259). Once done, run the built image (from a browser) like (slide 266). Show image published to DockerHub like (slide 269).

7. Execute `Docker volume ls` and list created `volumes` like (slide 369).

8. Execute `Docker network ls` and list created networks. 

Bonus tasks: 

9. Dockerize the visit counter Web App using docker compose. You should reproduce the same results as (slide 417).

10. Create a multi-node swarm, create a service in the swarm using nginx image, check service is successfully deployed in the swarm and provide an invocation test like (slide 480).

11. Deploy a Multi-service Application stack, images to be used are listed in (slide 521). Show that the application is running and provide successful execution print screens like (slide 525).


## Additional resources :   

Essential microservices online resources:

- üîó [http://martinfowler.com/articles/microservices.html](http://martinfowler.com/articles/microservices.html)
- üîó [https://microservices.io](https://microservices.io)
- üîó [https://www.ibm.com/cloud/learn/microservices](https://www.ibm.com/cloud/learn/microservices)
- üîó [https://www.nginx.com/blog/introduction-to-microservices/](https://www.nginx.com/blog/introduction-to-microservices/)


## Chapter Videos :

[Youtube video lecture Section 1: Docker History?](https://youtu.be/kXqj2pDxnQk)

<iframe width="560" height="315" src="https://www.youtube.com/embed/kXqj2pDxnQk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

[Youtube video lecture Section 2: Docker Ecosystem](https://youtu.be/MRejC4fuFzs)

<iframe width="560" height="315" src="https://www.youtube.com/embed/MRejC4fuFzs" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>



[Youtube video lecture Section 3: Installing Docker and Running our first container](https://youtu.be/4Iwg0YUHUQc)

<iframe width="560" height="315" src="https://www.youtube.com/embed/4Iwg0YUHUQc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


[Youtube video lecture Section 4: Docker Commands - more details](https://youtu.be/3tALzp_W9r8)

<iframe width="560" height="315" src="https://www.youtube.com/embed/3tALzp_W9r8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

[Youtube video lecture Section 5: Docker containers - running modes ](https://youtu.be/0E-XqPHyaIE)

<iframe width="560" height="315" src="https://www.youtube.com/embed/0E-XqPHyaIE" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

[Youtube video lecture Section 6: Manipulating images](https://youtu.be/Y9ER5lBbuY0)

<iframe width="560" height="315" src="https://www.youtube.com/embed/Y9ER5lBbuY0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>